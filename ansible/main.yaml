---

- name: Check all required variables are defined
  hosts: localhost

  vars_files:
    - vars/ansible_vars.yaml

  tasks:
    - name: Check all required variables are defined
      ansible.builtin.assert:
        that: item is defined
        success_msg: "Required variable {{ item }} is defined"
        fail_msg: "Required variable {{ item }} is not defined!"
      loop:
        - guac_db_password
        - guac_admin_password


- name: Basic hardening for all hosts
  hosts: all
  become: yes
  tags: hardening

  collections:
    - devsec.hardening

  vars_files:
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache
    - role: devsec.hardening.ssh_hardening
    - role: oefenweb.fail2ban


- name: Configure Guacamole VM
  hosts: guacamole
  become: yes
  tags: guacamole

  collections:
    - community.general
    - scicore.guacamole

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache
    - role: geerlingguy.docker
    - role: geerlingguy.pip

  tasks:
    # Ensure ansible_user has docker-group privileges
    - name: Reset connection so that group changes take effect
      meta: reset_connection

    - name: Register guacamole admin user
      ansible.builtin.user:
        name: "{{ ansible_user }}"
      register: user

    - name: Get guacamole admin user home directory
      ansible.builtin.set_fact:
        home_dir: "{{ user.home }}"

    - name: Install python3-ldap module
      ansible.builtin.apt:
        name: python3-ldap
        state: present

    - name: Check if database initialisation script exists
      ansible.builtin.stat:
        path: "{{ init_db_file_path }}"
      register: init_file

    - name: Create database initialisation script
      block:
        - name: Get database initialisation script contents
          become_user: "{{ ansible_user }}"
          community.docker.docker_container:
            name: guacamole
            image: "guacamole/guacamole:{{ guac_version }}"
            command: /opt/guacamole/bin/initdb.sh --postgres
            cleanup: yes
            detach: no
            container_default_behavior: compatibility
          register: init_script

        - name: Write database initialisation script
          ansible.builtin.copy:
            dest: "{{ init_db_file_path }}"
            content: "{{ init_script.container.Output }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
      when: not init_file.stat.exists

    - name: Create LDAP schema directory
      ansible.builtin.file:
        state: directory
        path: "{{ schema_directory }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Template base LDAP schema
      ansible.builtin.template:
        dest: "{{ schema_directory }}/base.ldif"
        src: templates/ldap/base.ldif.j2
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Check if Guacamole LDAP schema exists
      ansible.builtin.stat:
        path: "{{ guac_schema_file_path }}"
      register: guac_schema_file

    - name: Create Guacamole LDAP schema ldif
      block:
        - name: Get Guacamole LDAP schema
          become_user: "{{ ansible_user }}"
          community.docker.docker_container:
            name: guacamole
            image: "guacamole/guacamole:{{ guac_version }}"
            command: cat ldap/guacConfigGroup.ldif
            cleanup: yes
            detach: no
            container_default_behavior: compatibility
          register: schema

        - name: Write schema
          ansible.builtin.copy:
            dest: "{{ guac_schema_file_path }}"
            content: "{{ schema.container.Output }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
      when: not guac_schema_file.stat.exists

    - name: Create openldap data directory
      ansible.builtin.file:
        path: "{{ openldap_volume }}"
        state: directory
        owner: root
        group: root
        mode: 0770

    - name: Template self service password configuration
      ansible.builtin.template:
        dest: "{{ self_service_password_config_path }}"
        src: templates/guacamole/ssp_conf.php.j2
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Template traefik dynamic configuration
      ansible.builtin.template:
        src: guacamole/traefik_dynamic_conf.yml.j2
        dest: "{{ traefik_dynamic_config }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Template docker-compose file
      ansible.builtin.template:
        src: guacamole/docker-compose.yaml.j2
        dest: "{{ home_dir }}/docker-compose.yaml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: Run docker services
      become_user: "{{ ansible_user }}"
      community.docker.docker_compose:
        project_src: "{{ home_dir }}"
        project_name: guacamole
        pull: yes
      register: compose_output

    - name: Ensure that containers are running
      ansible.builtin.assert:
        that:
          - compose_output.services.database.postgres.state.running
          - compose_output.services.guacd.guacd.state.running
          - compose_output.services.guacamole.guacamole.state.running
          - compose_output.services.ldap.ldap.state.running
          - compose_output.services.reverse_proxy.traefik.state.running

    - name: Wait for docker services to be running
      ansible.builtin.wait_for:
        timeout: 20
      when: compose_output.changed

    - name: Create connections
      ansible.builtin.import_tasks: tasks/guacamole/connections.yaml

    - name: (Temporarily) disable TOTP to allowd Guacamole configuration through the API
      ansible.builtin.import_tasks: tasks/disable_guacamole_totp.yaml

    - name: Check if password has been changed from default
      ansible.builtin.stat:
        path: "{{ home_dir }}/guacadmin"
      register: guacadmin_file

    - name: Set Guacamole admin password
      block:
        - name: Change guacadmin password
          scicore.guacamole.guacamole_user:
            base_url: "{{ guacamole_root }}"
            auth_username: guacadmin
            auth_password: guacadmin
            username: guacadmin
            password: "{{ guac_admin_password }}"

        - name: Create guacadmin file
          ansible.builtin.file:
            path: "{{ home_dir }}/guacadmin"
            state: touch
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
            modification_time: preserve
            access_time: preserve
      when: not guacadmin_file.stat.exists

    - name: Install and enable Guacamole TOTP extension
      ansible.builtin.import_tasks: enable_guacamole_totp.yaml


- name: Configure DSVM
  hosts: dsvm
  become: yes
  tags: dsvm

  collections:
    - community.general

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache

  tasks:
    - name: Configure shared data disk and directory
      ansible.builtin.import_tasks: tasks/dsvm/shared_directory.yaml

    - name: Configure ingress and egress shares
      ansible.builtin.import_tasks: tasks/dsvm/shares.yaml

    - name: Install and configure RDP
      ansible.builtin.import_tasks: tasks/dsvm/rdp.yaml

    - name: Install and configure desktop
      ansible.builtin.import_tasks: tasks/dsvm/desktop.yaml

    - name: Install packages
      ansible.builtin.import_tasks: tasks/dsvm/packages.yaml


    - name: Set default Julia depot and pip cache directories
      ansible.builtin.blockinfile:
        path: /etc/bash.bashrc
        block: |
          export JULIA_DEPOT_PATH="/shared/.julia:$JULIA_DEPOT_PATH"
          export PIP_CACHE_DIR=/shared/.pip_cache

  handlers:
    - name: Restart xrdp
      ansible.builtin.systemd:
        name: xrdp
        state: restarted
