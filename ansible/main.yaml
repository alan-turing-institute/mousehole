---

- name: Check all required variables are defined
  hosts: localhost

  vars_files:
    - vars/ansible_vars.yaml

  tasks:
    - name: Check all required variables are defined
      ansible.builtin.assert:
        that: item is defined
        success_msg: "Required variable {{ item }} is defined"
        fail_msg: "Required variable {{ item }} is not defined!"
      loop:
        - guac_db_password
        - guac_admin_password


- name: Basic hardening for all hosts
  hosts: all
  become: yes
  tags: hardening

  collections:
    - devsec.hardening

  vars_files:
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache
    - role: devsec.hardening.ssh_hardening
    - role: oefenweb.fail2ban


- name: Configure Guacamole VM
  hosts: guacamole
  become: yes
  tags: guacamole

  vars:
    api_root: http://localhost:8080/guacamole/api
    data_source: postgresql
    guacadmin_file_path: "{{ ansible_user_dir }}/guacadmin"

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache
    - role: geerlingguy.docker
    - role: geerlingguy.pip

  tasks:
    # Ensure ansible_user has docker-group privileges
    - name: Reset connection so that group changes take effect
      meta: reset_connection

    - name: Check if database initialisation script exists
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/initdb.sql"
      register: init_file

    - name: Create database initialisation script
      block:
        - name: Get database initialisation script contents
          become_user: "{{ ansible_user }}"
          community.docker.docker_container:
            name: guacamole
            image: "guacamole/guacamole:{{ guac_version }}"
            command: /opt/guacamole/bin/initdb.sh --postgres
            cleanup: yes
            detach: no
            container_default_behavior: compatibility
          register: init_script

        - name: Write database initialisation script
          ansible.builtin.copy:
            dest: "{{ init_db_file }}"
            content: "{{ init_script.container.Output }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
      when: not init_file.stat.exists

    - name: Docker services
      block:
        - name: Template traefik dynamic configuration
          ansible.builtin.template:
            src: guacamole/traefik_dynamic_conf.yml.j2
            dest: "{{ traefik_dynamic_config }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644

        - name: Template docker-compose file
          ansible.builtin.template:
            src: guacamole/docker-compose.yaml.j2
            dest: "{{ ansible_user_dir }}/docker-compose.yaml"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644

        - name: Run docker services
          become_user: "{{ ansible_user }}"
          community.docker.docker_compose:
            project_src: "{{ ansible_user_dir }}"
            project_name: guacamole
            pull: yes
          register: compose_output

        - name: Ensure that containers are running
          ansible.builtin.assert:
            that:
              - compose_output.services.database.postgres.state.running
              - compose_output.services.guacamole.guacamole.state.running
              - compose_output.services.guacd.guacd.state.running
              - compose_output.services.reverse_proxy.traefik.state.running

    - name: (Temporarily) disable TOTP to allowd Guacamole configuration through the API
      ansible.builtin.import_tasks: tasks/disable_guacamole_totp.yaml

    - name: Check if password has been changed from default
      ansible.builtin.stat:
        path: "{{ guacadmin_file_path }}"
      register: guacadmin_file

    - name: Set Guacamole admin password
      # See https://github.com/ridvanaltun/guacamole-rest-api-documentation
      # and https://github.com/apache/guacamole-manual/pull/123/files
      block:
        - name: Get API token
          ansible.builtin.uri:
            url: "{{ api_root }}/tokens"
            method: POST
            user: "{{ guac_admin_user }}"
            password: guacadmin
            force_basic_auth: yes
            body_format: form-urlencoded
          register: token

        - name: Change guacadmin password
          ansible.builtin.uri:
            url: "{{ api_root }}/session/data/{{ data_source }}/users/{{ guac_admin_user }}/password?token={{ token.json.authToken }}"
            method: PUT
            body:
              oldPassword: guacadmin
              newPassword: "{{ guac_admin_password }}"
            body_format: json
            status_code: 204

        - name: Create guacadmin file
          ansible.builtin.file:
            path: "{{ guacadmin_file_path }}"
            state: touch
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
            modification_time: preserve
            access_time: preserve
      always:
        - name: Delete API token
          ansible.builtin.uri:
            url: "{{ api_root }}/tokens/{{ token.json.authToken }}?token={{ token.json.authToken }}"
            method: DELETE
            status_code: 204
      when: not guacadmin_file.stat.exists

    - name: Configure guacamole using API
      # See https://github.com/ridvanaltun/guacamole-rest-api-documentation
      # and https://github.com/apache/guacamole-manual/pull/123/files
      block:
        - name: Get API token
          ansible.builtin.uri:
            url: "{{ api_root }}/tokens"
            method: POST
            user: "{{ guac_admin_user }}"
            password: "{{ guac_admin_password }}"
            force_basic_auth: yes
            body_format: form-urlencoded
          register: token

        - name: Check if connections for DSVM exist
          ansible.builtin.uri:
            url: "{{ api_root }}/session/data/{{ data_source }}/connections/{{ item.identifier }}?token={{ token.json.authToken }}"
            method: GET
            status_code: [200, 404]
          loop: "{{ guac_connections }}"
          register: dsvm_connections

        - name: Create connections for DSVM
          ansible.builtin.uri:
            url: "{{ api_root }}/session/data/{{ data_source }}/connections?token={{ token.json.authToken }}"
            method: POST
            body: "{{ item.item.params }}"
            body_format: json
          when: item.status == 404
          loop: "{{ dsvm_connections.results }}"

        - name: Update RDP connection for DSVM
          ansible.builtin.uri:
            url: "{{ api_root }}/session/data/{{ data_source }}/connections/{{ item.item.identifier }}?token={{ token.json.authToken }}"
            method: PUT
            body: "{{ item.item.params }}"
            body_format: json
            status_code: 204
          when: item.status == 200
          loop: "{{ dsvm_connections.results }}"
      always:
        - name: Delete API token
          ansible.builtin.uri:
            url: "{{ api_root }}/tokens/{{ token.json.authToken }}?token={{ token.json.authToken }}"
            method: DELETE
            status_code: 204

    - name: Install and enable Guacamole TOTP extension
      ansible.builtin.import_tasks: enable_guacamole_totp.yaml


- name: Configure DSVM
  hosts: dsvm
  become: yes
  tags: dsvm

  collections:
    - community.general

  vars_files:
    - vars/ansible_vars.yaml
    - vars/terraform_vars.yaml

  roles:
    - role: wait_for_cloud_init
    - role: apt_cache

  tasks:
    - name: Configure shared data disk and directory
      ansible.builtin.import_tasks: tasks/dsvm/shared_directory.yaml

    - name: Configure ingress and egress shares
      ansible.builtin.import_tasks: tasks/dsvm/shares.yaml

    - name: Install and configure RDP
      ansible.builtin.import_tasks: tasks/dsvm/rdp.yaml

    - name: Install and configure desktop
      ansible.builtin.import_tasks: tasks/dsvm/desktop.yaml

    - name: Install packages
      ansible.builtin.import_tasks: tasks/dsvm/packages.yaml


    - name: Set default Julia depot and pip cache directories
      ansible.builtin.blockinfile:
        path: /etc/bash.bashrc
        block: |
          export JULIA_DEPOT_PATH="/shared/.julia:$JULIA_DEPOT_PATH"
          export PIP_CACHE_DIR=/shared/.pip_cache

  handlers:
    - name: Restart xrdp
      ansible.builtin.systemd:
        name: xrdp
        state: restarted
