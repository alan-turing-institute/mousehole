---

- name: Check all required variables are defined
  hosts: localhost

  vars_files:
    - vars/ansible_vars.yaml
    - vars/user_vars.yaml

  tasks:
    - name: Check all required user variables are defined
      ansible.builtin.assert:
        that:
          - item.username is defined
          - item.full_name is defined
          - item.surname is defined
          - item.email is defined
        success_msg: "User {{ item.username }} has all required variables defined"
        fail_msg: "User {{ item }} does not have all required variables defined!"
      loop: "{{ users }}"

    - name: Check all required variables are defined
      ansible.builtin.assert:
        that: "{{ item }} is defined"
        success_msg: "Required variable {{ item }} is defined"
        fail_msg: "Required variable {{ item }} is not defined!"
      loop:
        - ldap_admin_password


- name: Manage LDAP users
  hosts: guacamole

  vars_files:
    - vars/ansible_vars.yaml
    - vars/user_vars.yaml
    - vars/ldap_vars.yaml

  vars:
    user_dns: []

  tasks:
    - name: Add users
      # Will not overwrite an existing user entry
      community.general.ldap_entry:
        server_uri: "{{ ldap_uri }}"
        bind_dn: "{{ ldap_admin_dn }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "uid={{ item.username }},ou=users,{{ ldap_base_dn }}"
        objectClass:
          - inetOrgPerson
          - posixAccount
          - shadowAccount
        attributes:
          cn: "{{ item.full_name }}"
          homeDirectory: "/home/{{ item.username }}"
          mail: "{{ item.email }}"
          sn: "{{ item.surname }}"
          uid: "{{ item.username }}"
          uidNumber: "{{ item.number }}"
          gidNumber: "{{ mouseholeusers_gid }}"
          loginShell: /bin/bash
          # Generate a random, unstored password, salted and SHA1 hashed
          userPassword: "{{ lookup('password', '/dev/null') | password_hash('ldap_salted_sha1') }}"
      loop: "{{ users }}"

    - name: Build list of user dns
      ansible.builtin.set_fact:
        user_dns: "{{ user_dns | union(['uid=%s,ou=users,dc=mousehole,dc=com' | format(item.username)]) }}"
      loop: "{{ users }}"

    - name: Add users to connections
      community.general.ldap_attrs:
        server_uri: "{{ ldap_uri }}"
        bind_dn: "{{ ldap_admin_dn }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn={{ item }},ou=groups,{{ ldap_base_dn }}"
        state: present
        attributes:
          member: "{{ user_dns }}"
      loop:
        - RDP Connection
        - SSH Connection

    - name: Remove users
      community.general.ldap_entry:
        server_uri: "{{ ldap_uri }}"
        bind_dn: "{{ ldap_admin_dn }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "uid={{ item.username }},ou=users,{{ ldap_base_dn }}"
        state: absent
      loop: "{{ users_deleted }}"
